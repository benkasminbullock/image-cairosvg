[% start_year="2014" %]
[% size = 250 %]
[% site = "https://benkasminbullock.github.io/supertinyiconscairosvg/" %]
[% edir = "https://fastapi.metacpan.org/source/BKB/Image-CairoSVG-" _
 version _ "/examples" %]
[% MACRO captions BLOCK %]
<tr>
<td>
Input SVG
<td>
Output of Image::CairoSVG
</tr>
[% END # captions %]
[% MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|[% edir %]/[% pl %]> in the
distribution.)  
[% END # example %]
[% MACRO bug(file) BLOCK %]

=begin html

<table>
<tr>
<td>
<img height="[% size %]"
     src="[% site %]/svg/[% file %].svg"
     width="[% size %]">
</td>

<td>
<img height="[% size %]"
     src="[% site %]/png/[% file %].png"
     width="[% size %]">
</td>
</tr>
[% captions %]
</table>

=end html

[% END # bug %]

=encoding UTF-8

=head1 NAME

Image::CairoSVG - Render SVG into a Cairo surface

=head1 SYNOPSIS

This example converts an SVG file into PNG:

[% INCLUDE "synopsis.pl" | xtidy %]

=begin html 

<p>
This renders the following image:
</p>

<img width="451.271" height="187.542"
 src='[% edir %]/locust.png'>

=end html

(This example is included as
L<F<synopsis.pl>|[% edir %]/synopsis.pl> in the distribution. The
L<input|[% edir %]/locust.svg> and L<output
files|[% edir %]/locust.png> are also included.)

=head1 VERSION

This documents [% info.colon %] version [% info.version %]
corresponding to git commit L<[% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> released on [% commit.date %]. 

=head1 DESCRIPTION

This module renders SVG ("Scalable Vector Graphics") instructions into
a Cairo surface. The user can then choose what to do with the surface,
for example write it out to a PNG file.

=head1 METHODS

=head2 new

    my $cairosvg = Image::CairoSVG->new (%arguments);

Arguments are as follows

=over

=item surface

The user can supply a Cairo surface:

    my $cairosvg = Image::CairoSVG->new (surface => $surface);

For example,

    my $cairosvg = Image::CairoSVG->new (
        surface => Cairo::ImageSurface->create ('argb32', 100, 100)
    );

=item context

The user can also supply a Cairo context:

    my $cairosvg = Image::CairoSVG->new (context => $cr);

If a Cairo context and a surface are both supplied, the value of
C<surface> is ignored, a warning is printed, and the image is drawn
using only the C<context> value.

If you supply your own Cairo context, when you render an SVG which
uses the default (unspecified) values for such things as
C<stroke-width> or C<stroke-miterlimit>, the values of your Cairo
context will be used unaltered, which will result in incorrect
renderings in some cases. To avoid this, you can set all the default
values of a Cairo context to SVG default values rather than Cairo
default values using the function L</set_svg_defaults>.

=back

For simple drawing tasks, we recommend using the default surface
generated by this module, which is the return value from
L</render>. Only supply a surface if the module gets the dimensions of
your image wrong. Only use a Cairo context if you want to include the
image in some other image or rescale it. See L</Scaling the output>
for an example.

=head2 render

    my $surface = $cairosvg->render ('some.svg');

Draw an SVG file or scalar into a Cairo surface. The return value is
the surface drawn into. If the call value is a scalar containing what
looks like XML, it is parsed from the scalar instead. This method
guesses whether its argument is a file or a scalar by looking for a
pair of angle brackets (<>) in its first argument. If it does not find
angle brackets, it assumes the argument is a file name.

If the user did not supply a context or a surface to L</new>, a new
Cairo::ImageSurface object is generated. If the user supplies a
context argument with L</new>, the return value of render should be
ignored. If the user supplied a surface with L</new>, the return value
is just that surface.

If the user does not specify a surface, the generated surface returned
by C<render> is based on the attributes of the <svg> element,
specifically either the C<width> and C<height> attributes, or the
width and height specified in the C<viewBox> attribute.

Calling with a scalar containing XML was added in version 0.08.

=head1 EXAMPLES

=head2 Scaling the output

This example shows how to scale the output image using Cairo commands.

[% INCLUDE "scale.pl" | xtidy %]

=begin html 

<p>
The default size looks like this:
</p>
<img width="36" height="36" src='https://fastapi.metacpan.org/source/BKB/Image-CairoSVG-[% version %]/examples/durn.png'>
<p>
The scaled image looks like this:
</p>
<img width="200" height="200" src='https://fastapi.metacpan.org/source/BKB/Image-CairoSVG-[% version %]/examples/urn.png'>

=end html

(This example is included as L<F<scale.pl>|[% edir %]/scale.pl> in the
distribution. The original image is part of the L<Twitter Emoji
collection|https://twemoji.twitter.com/>, F<1f3fa.svg>, representing
C<U+1F3FA AMPHORA>. This illustration is used under the terms of
L<CC-BY 4.0|https://creativecommons.org/licenses/by/4.0/>)

=head1 DRAWING METHODS

The drawing methods of the module are as follows.

=head2 circle

    $cairosvg->circle (%attr);

Draw the circle specified by the SVG attributes in C<%attr> into the
surface of C<$cairosvg>.

=head2 ellipse

    $cairosvg->ellipse (%attr);

Draw the ellipse specified by the SVG attributes in C<%attr> into the
surface of C<$cairosvg>.

=head2 line

    $cairosvg->line (%attr);

Render the line specified by the SVG attributes in C<%attr> into the
surface specified by C<$cairosvg>.  Given SVG input of the form C<<
<line > >>, this renders it onto the Cairo surface.

=head2 path

    $cairosvg->path (%attr);

Given an SVG path element, send its attribute key / value pairs as
C<%attr> to render into the Cairo surface of C<$cairosvg>. This uses
L<Image::SVG::Path> to parse the "d" attibute of the path. 

This converts any quadratic bezier curves found in the path into cubic
bezier curves, since Cairo does not support quadratic bezier curves.

=head2 polygon

    $cairosvg->polygon (%attr);

Draw the polygon specified by the C<points> attribute of C<%attr>,
closing the path.

=head2 polyline

    $cairosvg->polyline (%attr);

Similar to L</polygon> except that it doesn't close the path.

=head2 processUse

    $cairosvg->processUse (%attr);

Process a <use> SVG element. It relies on C<$cairosvg> already having
processed the XML file in order to find the used element.

=head2 rect

    $cairosvg->rect (%attr);

Draw the rectangle specified by C<%attr> into the surface contained in
C<$cairosvg>.

If the rectangle has rounded corners (a non-zero C<rx> attribute), a
shim function is used to draw the rectangle, since Cairo has no native
support for rectangles with rounded corners.

=head1 FUNCTIONS

=head2 set_svg_defaults

    set_svg_defaults ($cr);

Set Cairo context C<$cr> with the SVG default values, which are
different to the Cairo ones. For example SVG has a default line width
for strokes (the default value of C<stroke-width>) of 1, but Cairo has
a default value for line widths of 2, so using the default values of
an unaltered Cairo context C<$cr> will result in inaccurate rendering
of an SVG which uses defaults.

This function only needs to be called if you supply your own context
in L</new>. If the user does not supply a context in L</new>, one is
created which uses this function to set all its defaults to the SVG
values.

Since version 0.23.

=head1 DEPENDENCIES

This module depends on the following other modules.

=over

=item L<Cairo>

Cairo is used for rendering the image.

=item L<Carp>

Carp is used for reporting errors.

=item L<Image::SVG::Path>

Image::SVG::Path is used for parsing the "path" information of the
SVG, see L</path>.

=item L<Math::Trig>

This is used for the value of C<pi>, and for various functions related
to drawing arcs, and for converting angles between radians (used by
Cairo) and degrees (used by SVG).

=item L<XML::Parser>

XML::Parser is used for parsing SVG files.

=back

=head1 SEE ALSO

=head2 Demonstration website and blog articles

L<This demonstration
website|https://benkasminbullock.github.io/supertinyiconscairosvg/>
shows the output of Image::CairoSVG on the Super Tiny Icons
collection, the L<Twitter Emoji
Collection|https://benkasminbullock.github.io/supertinyiconscairosvg/twemoji/>, and the L<SVG Test Suite|https://benkasminbullock.github.io/supertinyiconscairosvg/sts.html> (very limited support as yet).

Please see L</BUGS> below for notable errors in the rendering.

=head3 Blog articles

I've written some blog articles about extending the SVG support in
this module.

=over

=item L<Trying to get SVG right|https://benbullock.substack.com/p/trying-to-get-svg-right>

This was the first article, where I had discovered that the module's
arc-drawing code and arc-parsing code was not working.

=item L<Improvements to Image::CairoSVG|https://benbullock.substack.com/p/improvements-to-imagecairosvg>

This illustrates some of the improvements made up to version 0.16,
such as addition of opacity, support for the <use> tag, and more
correct drawing of circular arcs.

=item L<SVG matrix and miter limit|https://benbullock.substack.com/p/svg-matrix-and-miter-limit>

This documents visually the rendering improvements between version
0.17 and version 0.18.

=item L<For and against muddling booleans|https://benbullock.substack.com/p/for-and-against-muddling-booleans>

This documents an error caused by testing attributes directly, when an
attribute with value "zero" was ignored, causing a rendering error.

=back

=head2 Other software

=over

=item CairoSVG

L<CairoSVG|http://cairosvg.org/> is a Python SVG renderer in
Cairo. The elliptical arc drawing part of Image::CairoSVG is a
translation of its code into Perl.

=back

=head2 Other CPAN modules related to SVG

=over

=item L<Image::LibRSVG>

Perl extension for a Gnome library called librsvg which converts SVG
to PNG or JPEG, etc. We have not tested this library.

=item L<Image::Magick>

Does SVG to PNG conversion.

=item L<Image::SVG::Path>

This is a specialised module for reading the "d" attribute of SVG
paths.

=item L<Image::SVG::Transform>

Read the "transform" attribute of an SVG element. It is not a
dependency of this module, but I used this as a reference when writing
the transform code in this module.

=item L<MarpaX::Languages::SVG::Parser>

This extends the L<Marpa::R2> parser to parse SVG.

=item L<SVG>

This is for generating SVG documents.

=item L<SVG::Parser>

Parse the XML for SVG files. It can use either L<XML::Parser> or
L<XML::SAX> but XML::Parser seems not to work. See
L<https://rt.cpan.org/Ticket/Display.html?id=136404>.

=item L<SVG::Rasterize>

Rasterize SVG content to pixel graphics. We couldn't get this to
produce output. See
L<https://rt.cpan.org/Ticket/Display.html?id=136405>.

=back

=head2 Other CPAN modules

=over

=item L<Image::PNG::Cairo>

This might be useful if you want to do something with the PNG output
of Cairo other than just write it to a file, for example adding text
to it.

=back

=head2 More information

=over

=item Perl Maven article

L<SVG - Scalable Vector Graphics with
Perl|http://perlmaven.com/scalable-vector-graphics-with-perl> -
article at Perl Maven

=item Perl Cairo tutorial

The Cairo CPAN module is mostly undocumented. This L<Perl Cairo
tutorial|https://www.lemoda.net/cairo/cairo-tutorial/index.html> may
be useful if you need to go beyond defaults.

=back

=head1 BUGS

Various parts of the SVG standard are not implemented, as follows.

If viewing the HTML version of this page, the illustrations below each
bug description demonstrate instances from the Super Tiny Icons
collection where the bug causes a rendering problem. See
L</"Demonstration website and blog articles"> above.

=over

=item Default fill is incorrect in some cases

Default fill is not handled correctly.

[% bug("fritz") %]

[% bug("php") %]

=item Gradients

Linear and radial gradients are supported since version 0.22, but
there are some remaining issues.

[% bug("edge") %]

[% bug("firefox") %]

=item Shadows

Shadows are not supported.

[% bug("keepassdx") %]

=item Styles

Styles are not supported very well.

[% bug("tiktok") %]

=item Text

Text rendering is not supported.

[% bug("calendar") %]

=item Units

Currently only pixels, millimetres, inches, and percentages are
supported.

The conversion ratios are one millimetre is 25.4 inches, and one
inch is 96 pixels.

=back

[% INCLUDE "author" %]
